Shervin Shaikh & Ramon Rovirosa
CS 170
Project 2

Our pizza solution involved creating a mutex, in which either the Grad or Undergrad students can grab the lock.  Once either of them has taken the lock then the other must wait until it is released.  If the undergrads have the lock then we fork and have both of them try to grab the ugrad semaphore which has a start value of 2.  Once they are done eating then they call sem_up to note that they ate.  Once the loop inside the undergrad function is over, then the undergrads give up the mutex and then it is up for grabs once again.  If the Grads have grabbed the mutex then we have a for loop where we fork a process for each grad and have them fight over the two spots where they can eat.  Once the first two grab the grad semaphore, which has a start value of 2, they eat then call sem_up to allow the next grad student to eat.  Once all the grad students loops are over they give up the mutex and it is up for grabs once again.  We can have the case where the grad or undergrads grab the mutex twice or more in a row, but at some point both groups of students will have grabbed the mutex and have eaten.  Out solution does not cause starvation because there is one lock for deciding which group of students is allowed to eat then another lock deciding how many of them can eat at that time.  They give up the lock once they are done eating, and allow themselves or the other group of students to grab the lock and be able to eat.  Our main function is a constant while loop which forks then calls the UGrad and Grad function letting them know that they can start fighting over who gets the mutex, whoever does not have it must wait until it is released.  We initialize 3 semaphores in the main function (Name-start_value: Grad-2, UGrad-2, Mutex-1) and we use these as a tool to be able to control who is eating at what point.